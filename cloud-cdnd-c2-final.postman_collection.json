{
	"info": {
		"_postman_id": "e17e9cec-fd34-4450-950b-32eda4ee5928",
		"name": "cloud-cdnd-c2-final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Required Endpoint",
			"item": [
				{
					"name": "/filteredImage (working url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": ""
							}
						},
						"url": {
							"raw": "http://{{HOST}}/filteredimage?image_url=https://cdn.pixabay.com/photo/2020/04/17/09/01/victoria-5053935_1280.jpg",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							],
							"query": [
								{
									"key": "image_url",
									"value": "https://cdn.pixabay.com/photo/2020/04/17/09/01/victoria-5053935_1280.jpg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/filteredimage  (bad url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error message prompts user to check provided url\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.eql('Unable to read image URL, please ensure resource exists.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/filteredimage?image_url=https://cdn.pixabay.com/photo/2020/04/19/23/27/bad-url-5065859_1280.jpg",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							],
							"query": [
								{
									"key": "image_url",
									"value": "https://cdn.pixabay.com/photo/2020/04/19/23/27/bad-url-5065859_1280.jpg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/filteredimage  (no url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message prompts user to add url\", function () {",
									"    let responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.eql('Image URL required.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/filteredimage",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							]
						}
					},
					"response": []
				},
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "319b9a30-fcca-4233-8736-750ad833fe3e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Responds with simple message\", function () {",
									"    let responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.eql('try GET /filteredimage?image_url={{}}');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "99f01f7f-a2df-403f-a2db-c387655f57cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e37cdade-15fd-49da-a942-10e97cb1569b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Additional Features",
			"item": [
				{
					"name": "/api/v0/feed filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ad01629-c164-41ef-9d19-0a5fd13274af",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"The post returns a new item with an id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Signed url in response is for the filtered image which was saved to the bucket\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.contain('https://udagram-hill-dev.s3.amazonaws.com/filter/filtered.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImhlbGxvQGdtYWlsLmNvbSIsInBhc3N3b3JkX2hhc2giOiIkMmIkMTAkUnFzLnRkUlAzb1ZtQk95V3FMcUFHZXloSFBscjN6UlFOMFVBWWJNS1l0U1hsT3BBc2U3MVMiLCJjcmVhdGVkQXQiOiIyMDIwLTA0LTIwVDAwOjU5OjE4LjcxMVoiLCJ1cGRhdGVkQXQiOiIyMDIwLTA0LTIwVDAwOjU5OjE4LjcxMloifQ.tSFkmwUaWjqlgoFIsWdFJMkTI2squwo2vLZYSsyxBhk",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"caption\": \"filtered fire\",\n    \"url\": \"sculpture-5057581_1280.jpg\",\n    \"filter\": true\n}"
						},
						"url": {
							"raw": "{{udagram-restapi-host}}/api/v0/feed",
							"host": [
								"{{udagram-restapi-host}}"
							],
							"path": [
								"api",
								"v0",
								"feed"
							]
						},
						"description": "Post a new filtered item to the feed:\n\nUdagram rest api server should call image filter with path to an image which was already uploaded by the user with their signed put url\n\nImage filter should get that file from the bucket, and add its filtered version to the bucket\n\nImage filter should respond to udagram rest api server with the path to the filtered image which was saved on the bucket\n\nUdagram rest api should respond to user with the new item's details, including the signed get url for filtered image"
					},
					"response": []
				},
				{
					"name": "/filteredImage (existing file path in bucket) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Returns filtered image path on bucket\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.contain('filter/');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/filteredimage?image_url=bountyTest2.jpg",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							],
							"query": [
								{
									"key": "image_url",
									"value": "bountyTest2.jpg"
								}
							]
						},
						"description": "Given the path to an existing image in the bucket, image-filter should add its filtered version to the bucket as well and respond with its path"
					},
					"response": []
				},
				{
					"name": "/filteredImage (bad url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error message prompts user to check provided url\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.eql('Unable to read image URL, please ensure resource exists.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/filteredimage?image_url=fileThatDoesntExist.jpg",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							],
							"query": [
								{
									"key": "image_url",
									"value": "fileThatDoesntExist.jpg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/filteredImage (no url)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b15c31-a596-484d-b695-2004d54c517c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message prompts user to add url\", function () {",
									"    let responseText = pm.response.text();",
									"    pm.expect(responseText).to.be.eql('Image URL required.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/filteredimage?image_url=",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"filteredimage"
							],
							"query": [
								{
									"key": "image_url",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5887df52-1889-4e1f-82ee-054ab37b450a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e332dfe-c833-430b-b947-ab6c00311c28",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "69ac64cf-f822-4f22-9bf9-7014e421be7d",
			"key": "HOST",
			"value": "image-filter--dev.us-east-1.elasticbeanstalk.com",
			"type": "string"
		},
		{
			"id": "7900d2f5-efc7-48ec-bace-3c6780aacad0",
			"key": "udagram-restapi-host",
			"value": "udagram-hill-dev-dev.us-east-1.elasticbeanstalk.com",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}